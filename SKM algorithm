def std_matrix(mat):
    row_norms = np.linalg.norm(mat, axis=1, keepdims=True)
    return mat / row_norms

def bi_sign(vec):
    return np.where(vec >= 0, 1, -1)

def hadamard_product(A, b):
    m, n = A.shape
    b = b.ravel()

    B = []
    for i in range(n):
        B.append(b)

    B = np.array(B)
    B = np.transpose(B)
    return -1 * A * B

def sampling_kaczmarz_motzkins(A, x_star, beta, lambd, k, type_, normalize=True):
    if type_ not in ["hadamart_product", "hadamart_with_pairwise", "hadamart_gaussian_promax"]:
        raise ValueError("Invalid type. Choose from 'hadamart_product', or 'gaussian'hadamart_product, or 'hadamart_gaussian_promax', or .")

    m, n = A.shape
    if normalize:
        norm_xk = np.linalg.norm(x_star)
        if norm_xk != 0:
            x_star = x_star / norm_xk

    main_matrix = hadamard_product(A, bi_sign(A @ x_star))
    additional_matrix = None
    if type_ == "hadamart_product":
        additional_matrix = None

    if type_ == "hadamart_with_pairwise":
        pairwise_rows = []
        for i in range(m * 10):
            set_of_indexes = np.random.choice(m, 2, replace=False)
            pairwise_rows.append(A[set_of_indexes[0], :] - A[set_of_indexes[1], :])

        pairwise_rows = std_matrix(pairwise_rows)
        additional_matrix = hadamard_product(pairwise_rows, bi_sign(pairwise_rows @ x_star))

    if type_ == "hadamart_gaussian_promax":
        #lam = np.random.randint(100, 500, size=(m, n))
        #P = np.random.poisson(lam=lam, size=(m, n))

        gaussian_rows = std_matrix(np.random.randn(m, n))
        additional_matrix = hadamard_product(gaussian_rows, bi_sign(gaussian_rows @ x_star))

    xk = np.ones(n)
    xk_history = [xk.copy()]
    accuracy_history = []
    error_history = []

    initial_signs = bi_sign(main_matrix @ x_star).ravel()
    for iter_num in range(1, k + 1):
        set_of_indexes = np.random.choice(m, beta, replace=False)
        product = (main_matrix[set_of_indexes, :] @ xk).ravel()
        max_element_index = 0
        for i in range(len(product)):
            if product[i] > product[max_element_index]:
                max_element_index = i

        max_row = main_matrix[set_of_indexes[max_element_index]]
        max_projection = product[max_element_index]

        if additional_matrix is not None:
            set_of_indexes = np.random.choice(additional_matrix.shape[0], beta, replace=False)
            product = (additional_matrix[set_of_indexes, :] @ xk).ravel()
            max_element_index = 0
            for i in range(len(product)):
                if product[i] > product[max_element_index]:
                    max_element_index = i

            if max_projection < product[max_element_index]:
                max_projection = product[max_element_index]
                max_row = additional_matrix[set_of_indexes[max_element_index]]

        xk = xk - (lambd * max(max_projection, 0)) * max_row

        if normalize:
            norm_xk = np.linalg.norm(xk)
            if norm_xk != 0:
                xk = xk / norm_xk

        xk_history.append(xk.copy())
        accuracy_history.append(np.sum(bi_sign(main_matrix @ xk).ravel() == initial_signs) / m)

        error = np.linalg.norm(xk - x_star.ravel()) ** 2
        error_history.append(error)

    return xk_history, accuracy_history, error_history
